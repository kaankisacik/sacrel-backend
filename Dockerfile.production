# Multi-stage build için production optimized Dockerfile

# Build stage
FROM node:20-alpine AS builder

# pnpm'i yükle
RUN npm install -g pnpm

WORKDIR /app

# Package files'ları kopyala
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Dependencies'leri yükle (dev dependencies dahil)
RUN pnpm install --frozen-lockfile

# Source code'u kopyala
COPY . .

# Build işlemini gerçekleştir
RUN pnpm build

# Production stage
FROM node:20-alpine AS production

# pnpm'i yükle
RUN npm install -g pnpm

# Security için non-root user oluştur
RUN addgroup -g 1001 -S nodejs
RUN adduser -S medusa -u 1001

WORKDIR /app

# Package files'ları kopyala
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Sadece production dependencies'leri yükle
RUN pnpm install --frozen-lockfile --prod

# Build artifacts'ları önceki stage'den kopyala
COPY --from=builder /app/.medusa ./.medusa
COPY --from=builder /app/medusa-config.ts ./
COPY --from=builder /app/instrumentation.ts ./

# Source dosyalarını kopyala (runtime'da gerekli olanlar)
COPY --chown=medusa:nodejs ./src ./src

# Static dosyalar için dizin oluştur ve ownership'i ayarla
RUN mkdir -p /app/static && chown -R medusa:nodejs /app/static

# User'ı değiştir
USER medusa

# Port'u expose et
EXPOSE 9000

# Health check ekle
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:9000/health || exit 1

# Environment variable'ını set et
ENV NODE_ENV=production

# Uygulamayı başlat
CMD ["pnpm", "start"]
